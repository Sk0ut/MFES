class Board
types
-- TODO Define types here
public Coords = seq of nat
	inv c == len(c) = 2;
public BoardTiles = map Coords to Tile;
public Pieces = map Coords to Piece;
public Player = <PLAYER1> | <PLAYER2> | <DRAW>;
values
public ROW : nat1 = 1;
public COL : nat1 = 2;
instance variables
-- TODO Define instance variables here
public tiles: BoardTiles := {|->};
public pieces: Pieces := {|->};
private playersWithPieces: set of Piece`Owner := {};
private allowedMoves : set of Move := {StepMove`singleton, JumpMove`singleton, SwimMove`singleton};
public currentPlayer : Player := <PLAYER1>

operations
-- TODO Define operations here
		public Board : () ==> Board
		Board() == (
			tiles := {
				[0, 0] |-> new PlainTile(),
				[0, 1] |-> new PlainTile(),
				[0, 2] |-> new TrapTile(<PLAYER1>),
				[0, 3] |-> new DenTile(<PLAYER1>),
				[0, 4] |-> new TrapTile(<PLAYER1>),
				[0, 5] |-> new PlainTile(),
				[0, 6] |-> new PlainTile(),
				
				[1, 0] |-> new PlainTile(),
				[1, 1] |-> new PlainTile(),
				[1, 2] |-> new PlainTile(),
				[1, 3] |-> new TrapTile(<PLAYER1>),
				[1, 4] |-> new PlainTile(),
				[1, 5] |-> new PlainTile(),
				[1, 6] |-> new PlainTile(),
				
				[2, 0] |-> new PlainTile(),
				[2, 1] |-> new PlainTile(),
				[2, 2] |-> new PlainTile(),
				[2, 3] |-> new PlainTile(),
				[2, 4] |-> new PlainTile(),
				[2, 5] |-> new PlainTile(),
				[2, 6] |-> new PlainTile(),
	
				[3, 0] |-> new PlainTile(),
				[3, 1] |-> new WaterTile(),
				[3, 2] |-> new WaterTile(),
				[3, 3] |-> new PlainTile(),
				[3, 4] |-> new WaterTile(),
				[3, 5] |-> new WaterTile(),
				[3, 6] |-> new PlainTile(),
				
				[4, 0] |-> new PlainTile(),
				[4, 1] |-> new WaterTile(),
				[4, 2] |-> new WaterTile(),
				[4, 3] |-> new PlainTile(),
				[4, 4] |-> new WaterTile(),
				[4, 5] |-> new WaterTile(),
				[4, 6] |-> new PlainTile(),
				
				[5, 0] |-> new PlainTile(),
				[5, 1] |-> new WaterTile(),
				[5, 2] |-> new WaterTile(),
				[5, 3] |-> new PlainTile(),
				[5, 4] |-> new WaterTile(),
				[5, 5] |-> new WaterTile(),
				[5, 6] |-> new PlainTile(),
	
				[6, 0] |-> new PlainTile(),
				[6, 1] |-> new PlainTile(),
				[6, 2] |-> new PlainTile(),
				[6, 3] |-> new PlainTile(),
				[6, 4] |-> new PlainTile(),
				[6, 5] |-> new PlainTile(),
				[6, 6] |-> new PlainTile(),
				
				[7, 0] |-> new PlainTile(),
				[7, 1] |-> new PlainTile(),
				[7, 2] |-> new PlainTile(),
				[7, 3] |-> new TrapTile(<PLAYER2>),
				[7, 4] |-> new PlainTile(),
				[7, 5] |-> new PlainTile(),
				[7, 6] |-> new PlainTile(),
				
				[8, 0] |-> new PlainTile(),
				[8, 1] |-> new PlainTile(),
				[8, 2] |-> new TrapTile(<PLAYER2>),
				[8, 3] |-> new DenTile(<PLAYER2>),
				[8, 4] |-> new TrapTile(<PLAYER2>),
				[8, 5] |-> new PlainTile(),
				[8, 6] |-> new PlainTile()
			};
			
			
			pieces := {
				[0, 0] |-> new TigerPiece(<PLAYER1>),
				[0, 6] |-> new LionPiece(<PLAYER1>),
				[1, 1] |-> new CatPiece(<PLAYER1>),
				[1, 5] |-> new DogPiece(<PLAYER1>),
				[2, 0] |-> new WolfPiece(<PLAYER1>),
				[2, 2] |-> new ElephantPiece(<PLAYER1>),
				[2, 4] |-> new LeopardPiece(<PLAYER1>),
				[2, 6] |-> new RatPiece(<PLAYER1>),
				
				[8, 6] |-> new TigerPiece(<PLAYER2>),
				[8, 0] |-> new LionPiece(<PLAYER2>),
				[7, 5] |-> new CatPiece(<PLAYER2>),
				[7, 1] |-> new DogPiece(<PLAYER2>),
				[6, 6] |-> new WolfPiece(<PLAYER2>),
				[6, 4] |-> new ElephantPiece(<PLAYER2>),
				[6, 2] |-> new LeopardPiece(<PLAYER2>),
				[6, 0] |-> new RatPiece(<PLAYER2>)		
			};
			return self
		);
		
		public Board : BoardTiles * Pieces ==> Board
		Board(bt, p) == (
				tiles := bt;
				pieces := p;
				return self
		)
		post tiles = bt and pieces = p and dom pieces subset dom tiles;
		
		-- MOVE
		
		public pure validBoard : () ==> bool
		validBoard() == (
				for all p in set dom self.pieces do
				(
					-- Se algum animal estiver num tile que nao pode estar, o board e invalido
					if self.tiles(p).type not in set self.pieces(p).steppableTiles then return false;
					-- Se um animal de algum jogador estiver no seu den, o board e invalido
					if self.tiles(p).type = "DenTile" and self.tiles(p).owner = self.pieces(p).owner then return false
				);
				return true
		);
		
		public pure validMove : Coords * Coords ==> bool
		validMove(source, dest) == (
				-- Se na origem nao estiver uma peca, o movimento e invalido
				if source not in set dom self.pieces then return false;
				
				if source = dest then return false;
				
				-- Se a peca que la estiver nao for do jogador atual a jogar, o movimento e invalido
				if self.pieces(source).owner <> self.currentPlayer then return false;
		
				-- Se o destino estiver ocupado por uma peca do proprio jogador, o movimento e invalido
				if dest in set dom self.pieces and self.pieces(dest).owner = <PLAYER1> then return false;
				
				-- O movimento só é válido se uma das jogadas permitidas o considerar válido
				return exists move in set self.allowedMoves & move.validMove(self, source, dest);
		);
		
		private removePiece : Coords ==> ()
		removePiece(coord) == (
			pieces := {coord} <-: pieces
		)
		pre coord in set dom self.pieces;
		
		private addPiece : Coords * Piece ==> ()
		addPiece(coord, piece) == (
			pieces := pieces ++ {coord |-> piece}
		)
		pre coord not in set dom self.pieces and coord in set dom self.tiles;
		
		public movePiece : Coords * Coords ==> ()
		movePiece(coord1, coord2) == (
			if coord2 in set dom self.pieces then (
					if capture(coord2, self.pieces(coord1), self.pieces(coord2)) = {"attacker", "defender"} then (
							removePiece(coord1);
							removePiece(coord2);
							changePlayer();
							return
					)
					elseif capture(coord2, self.pieces(coord1), self.pieces(coord2)) = {"defender"} then (
							removePiece(coord1);
							changePlayer();
							return
					)
			);
			addPiece(coord2, self.pieces(coord1));
			removePiece(coord1);
			changePlayer();
		)
		pre validMove(coord1, coord2)
		post validBoard();
		
		
		-- WINCON
		public checkWinCon : () ==> Player
		checkWinCon() == (
				-- If one of the dens is occupied, the player that occupies it won the game
				for all coords in set dom self.pieces do (
						if self.tiles(coords).type = "DenTile" then
								return self.pieces(coords).owner
				);
				
				-- If a player has lost all pieces the other player won the game
				playersWithPieces := {};
				for all coords in set dom self.pieces do (
						if self.pieces(coords).owner not in set playersWithPieces then 
								playersWithPieces := playersWithPieces union {self.pieces(coords).owner}
				);
				if <PLAYER1> in set playersWithPieces and <PLAYER2> not in set playersWithPieces  then return <PLAYER1>
				elseif <PLAYER2> in set playersWithPieces and <PLAYER1> not in set playersWithPieces  then return <PLAYER2>
				elseif <PLAYER2> not in set playersWithPieces and <PLAYER1> not in set playersWithPieces  then return <DRAW>
				else return nil
		);
		
		-- CAPTURE
		public capture : Coords * Piece * Piece ==> set of seq1 of char
		capture(coord, attacker, defender) == (
				-- The rat can kill the elephant
				if attacker.type = "RatPiece" and defender.type = "ElephantPiece" then
						return {"attacker"};
				
				-- The player may capture any enemy piece in one of the player's trap squares regardless of rank.
				if self.tiles(coord).type = "TrapTile" then
						if defender.owner = self.tiles(coord).owner then return {"defender"}
						else return {"attacker"};
				
				-- Else, return the highest ranked piece. In case of a draw, both get captured
				if attacker.rank > defender.rank then return {"attacker"}
				elseif defender.rank > attacker.rank then return {"defender"}
				else return {"defender", "attacker"}
		)
		pre self.pieces(coord) = defender;
		
		-- CHANGE PLAYER
		private changePlayer : () ==> ()
		changePlayer() == (
				if self.currentPlayer = <PLAYER1> then currentPlayer := <PLAYER2>
				else currentPlayer := <PLAYER1>
		)

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Board