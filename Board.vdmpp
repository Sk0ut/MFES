class Board
types
	public Coords = seq of nat
		inv c == len(c) = 2;
	public BoardTiles = map Coords to Tile;
	public Pieces = map Coords to Piece;
	public Player = <PLAYER1> | <PLAYER2>;
	public GameState = <SETUP> | <PLAY> | <END>
values
	public ROW : nat1 = 1;
	public COL : nat1 = 2;
	public DEFAULT_TILES : BoardTiles = {
				[0, 0] |-> new PlainTile(),
				[0, 1] |-> new PlainTile(),
				[0, 2] |-> new TrapTile(<PLAYER1>),
				[0, 3] |-> new DenTile(<PLAYER1>),
				[0, 4] |-> new TrapTile(<PLAYER1>),
				[0, 5] |-> new PlainTile(),
				[0, 6] |-> new PlainTile(),
				
				[1, 0] |-> new PlainTile(),
				[1, 1] |-> new PlainTile(),
				[1, 2] |-> new PlainTile(),
				[1, 3] |-> new TrapTile(<PLAYER1>),
				[1, 4] |-> new PlainTile(),
				[1, 5] |-> new PlainTile(),
				[1, 6] |-> new PlainTile(),
				
				[2, 0] |-> new PlainTile(),
				[2, 1] |-> new PlainTile(),
				[2, 2] |-> new PlainTile(),
				[2, 3] |-> new PlainTile(),
				[2, 4] |-> new PlainTile(),
				[2, 5] |-> new PlainTile(),
				[2, 6] |-> new PlainTile(),
	
				[3, 0] |-> new PlainTile(),
				[3, 1] |-> new WaterTile(),
				[3, 2] |-> new WaterTile(),
				[3, 3] |-> new PlainTile(),
				[3, 4] |-> new WaterTile(),
				[3, 5] |-> new WaterTile(),
				[3, 6] |-> new PlainTile(),
				
				[4, 0] |-> new PlainTile(),
				[4, 1] |-> new WaterTile(),
				[4, 2] |-> new WaterTile(),
				[4, 3] |-> new PlainTile(),
				[4, 4] |-> new WaterTile(),
				[4, 5] |-> new WaterTile(),
				[4, 6] |-> new PlainTile(),
				
				[5, 0] |-> new PlainTile(),
				[5, 1] |-> new WaterTile(),
				[5, 2] |-> new WaterTile(),
				[5, 3] |-> new PlainTile(),
				[5, 4] |-> new WaterTile(),
				[5, 5] |-> new WaterTile(),
				[5, 6] |-> new PlainTile(),
	
				[6, 0] |-> new PlainTile(),
				[6, 1] |-> new PlainTile(),
				[6, 2] |-> new PlainTile(),
				[6, 3] |-> new PlainTile(),
				[6, 4] |-> new PlainTile(),
				[6, 5] |-> new PlainTile(),
				[6, 6] |-> new PlainTile(),
				
				[7, 0] |-> new PlainTile(),
				[7, 1] |-> new PlainTile(),
				[7, 2] |-> new PlainTile(),
				[7, 3] |-> new TrapTile(<PLAYER2>),
				[7, 4] |-> new PlainTile(),
				[7, 5] |-> new PlainTile(),
				[7, 6] |-> new PlainTile(),
				
				[8, 0] |-> new PlainTile(),
				[8, 1] |-> new PlainTile(),
				[8, 2] |-> new TrapTile(<PLAYER2>),
				[8, 3] |-> new DenTile(<PLAYER2>),
				[8, 4] |-> new TrapTile(<PLAYER2>),
				[8, 5] |-> new PlainTile(),
				[8, 6] |-> new PlainTile()
			};
	public DEFAULT_PIECES : Pieces = {
				[0, 0] |-> new TigerPiece(<PLAYER1>),
				[0, 6] |-> new LionPiece(<PLAYER1>),
				[1, 1] |-> new CatPiece(<PLAYER1>),
				[1, 5] |-> new DogPiece(<PLAYER1>),
				[2, 0] |-> new ElephantPiece(<PLAYER1>),
				[2, 2] |-> new WolfPiece(<PLAYER1>),
				[2, 4] |-> new LeopardPiece(<PLAYER1>),
				[2, 6] |-> new RatPiece(<PLAYER1>),
				
				[8, 6] |-> new TigerPiece(<PLAYER2>),
				[8, 0] |-> new LionPiece(<PLAYER2>),
				[7, 5] |-> new CatPiece(<PLAYER2>),
				[7, 1] |-> new DogPiece(<PLAYER2>),
				[6, 6] |-> new ElephantPiece(<PLAYER2>),
				[6, 4] |-> new WolfPiece(<PLAYER2>),
				[6, 2] |-> new LeopardPiece(<PLAYER2>),
				[6, 0] |-> new RatPiece(<PLAYER2>)		
			};
instance variables
	public tiles: BoardTiles;
	public pieces: Pieces;
	private allowedMoves : set of Move := {new StepMove(), new JumpMove(), new SwimMove()};
	public currentPlayer : [Player];
	public winner : [Player];
	public state : GameState;
	
	inv validBoard();
	inv dom pieces subset dom tiles;
	inv winner <> nil <=> state = <END>;
	inv state = <PLAY> => currentPlayer <> nil;

operations
		public Board : () ==> Board
		Board() == Board(DEFAULT_TILES, DEFAULT_PIECES)
		pre dom DEFAULT_PIECES subset dom DEFAULT_TILES
		post tiles = DEFAULT_TILES and pieces = DEFAULT_PIECES;
		
		public Board : Pieces ==> Board
		Board(piecesArg) == Board(DEFAULT_TILES, piecesArg)
		pre dom piecesArg subset dom DEFAULT_TILES
		post tiles = DEFAULT_TILES and pieces = piecesArg;
		
		public Board : BoardTiles * Pieces ==> Board
		Board(bt, p) == (
				tiles := bt;
				pieces := p;
				winner := nil;
				currentPlayer := nil;
				state := <SETUP>;
				return self
		)
		pre dom p subset dom bt
		post tiles = bt and pieces = p;
		
		public startGame : () ==> ()
		startGame() == (
			atomic (
				state := <PLAY>;
				currentPlayer := <PLAYER1>;
			);
			
			let w : [Player] = checkWinCon() in
				if w <> nil then
					atomic (
						state := <END>;
						winner := w;
					);
		)
		pre state = <SETUP>
		post state in set {<PLAY>, <END>};
		
		-- MOVE
		public pure validBoard : () ==> bool
		validBoard() == (
				for all p in set dom self.pieces do
				(
					-- Se algum animal estiver num tile que nao pode estar, o board e invalido
					if self.tiles(p).type not in set self.pieces(p).steppableTiles then return false;
					-- Se um animal de algum jogador estiver no seu den, o board e invalido
					if self.tiles(p).type = DenTile`TYPE and self.tiles(p).owner = self.pieces(p).owner then return false
				);
				return true;
		);
		
		public pure validMove : Coords * Coords ==> bool
		validMove(source, dest) == (
				-- Se não estiver na fase de jogo, o movimento é inválido
				if state <> <PLAY> then return false;
		
				-- Se as posições não existirem no tabuleiro, o movimento é inválido
				if not ({source, dest} subset dom self.tiles) then return false; 
		
				-- Se na origem nao estiver uma peca, o movimento e invalido
				if source not in set dom self.pieces then return false;
				
				-- A origem não pode ser igual ao destino
				if source = dest then return false;
				
				-- Se a peca que la estiver nao for do jogador atual a jogar, o movimento e invalido
				if self.pieces(source).owner <> self.currentPlayer then return false;
		
				-- Se o destino estiver ocupado por uma peca do proprio jogador, o movimento e invalido
				if dest in set dom self.pieces and self.pieces(dest).owner = <PLAYER1> then return false;
				
				-- O movimento só é válido se uma das jogadas permitidas o considerar válido
				return exists move in set self.allowedMoves & move.validMove(self, source, dest);
		);
		
		private removePiece : Coords ==> ()
		removePiece(coord) == (
			pieces := {coord} <-: pieces
		)
		pre coord in set dom self.pieces
		post coord not in set dom self.pieces;
		
		private addPiece : Coords * Piece ==> ()
		addPiece(coord, piece) == (
			pieces := pieces ++ {coord |-> piece}
		)
		pre coord not in set dom self.pieces and coord in set dom self.tiles
		post self.pieces(coord) = piece;
		
		public play : Coords * Coords ==> ()
		play(src, dest) == (
			movePiece(src, dest);
			changePlayer();
			let w : [Player] = checkWinCon() in
				if w <> nil then
					atomic (
						state := <END>;
						winner := w;
					);
		)
		pre state = <PLAY> and validMove(src, dest)
		post state in set {<PLAY>, <END>} and currentPlayer <> currentPlayer~;
		
		private movePiece : Coords * Coords ==> ()
		movePiece(src, dest) == (
			dcl pieceToMove : Piece := self.pieces(src);
			
			if dest in set dom self.pieces then (
					dcl defender : Piece := self.pieces(dest);
					dcl winnerPiece : Piece := capture(dest, pieceToMove, defender);
					removePiece(src);
					removePiece(dest);
					addPiece(dest, winnerPiece);
					
			) else (
				removePiece(src);
				addPiece(dest, pieceToMove);
			);
		)
		pre validMove(src, dest) and state = <PLAY>
		post src not in set dom pieces and dest in set dom pieces;
		
		
		-- WINCON
		public checkWinCon : () ==> [Player]
		checkWinCon() == (
				dcl playersWithPieces : set of Piece`Owner := {};
				-- If one of the dens is occupied, the player that occupies it won the game
				for all coords in set dom self.pieces do (
						if self.tiles(coords).type = DenTile`TYPE then
								return self.pieces(coords).owner
				);
				-- If a player has lost all pieces the other player won the game
				for all coords in set dom self.pieces do (
						if self.pieces(coords).owner not in set playersWithPieces then 
								playersWithPieces := playersWithPieces union {self.pieces(coords).owner}
				);
				if <PLAYER1> in set playersWithPieces and <PLAYER2> not in set playersWithPieces  then return <PLAYER1>
				elseif <PLAYER2> in set playersWithPieces and <PLAYER1> not in set playersWithPieces  then return <PLAYER2>
				else return nil
		)
		pre state = <PLAY>;
		
		-- CAPTURE
		public capture : Coords * Piece * Piece ==> Piece
		capture(coord, attacker, defender) == (
			dcl tile : Tile := self.tiles(coord);
				-- The player may capture any enemy piece in one of the player's trap squares regardless of rank.
				if tile.type = TrapTile`TYPE then
						if attacker.owner = tile.owner then return attacker
						else return defender;
						
				-- The rat can kill the elephant
				if attacker.type = RatPiece`TYPE and defender.type = ElephantPiece`TYPE then
						return attacker;
				
				-- Else, return the highest ranked piece. In the case of draw, the attacker wins
				if attacker.rank >= defender.rank then return attacker
				else return defender;
		)
		pre coord in set dom pieces and self.pieces(coord) = defender and state = <PLAY>;
		
		-- CHANGE PLAYER
		private changePlayer : () ==> ()
		changePlayer() == (
				if self.currentPlayer = <PLAYER1> then currentPlayer := <PLAYER2>
				else currentPlayer := <PLAYER1>
		)
		pre state = <PLAY>
		post currentPlayer <> currentPlayer~;
end Board