class BoardTest is subclass of TestCase
operations

	public testStepMove: () ==> ()
	testStepMove() == (
		dcl board : Board := new Board();
		dcl src : Board`Coords := [2,6];
		dcl dest : Board`Coords := [3,6];
		dcl mousePiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(mousePiece.type, RatPiece`TYPE);
		assertEqual(mousePiece.owner, <PLAYER1>);
		board.play(src, dest);
		assertEqual(board.pieces(dest), mousePiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testSwimMove: () ==> ()
	testSwimMove() == (
		dcl src : Board`Coords := [2,5];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [3,5];
		dcl mousePiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, WaterTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), mousePiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testJumpMoveVertical: () ==> ()
	testJumpMoveVertical() == (
		dcl src: Board`Coords := [2,5];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [6, 5];
		dcl lionPiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), lionPiece);
		assertTrue(src not in set dom board.pieces);
	);

	public testJumpMoveHorizontal: () ==> ()
	testJumpMoveHorizontal() == (
		dcl src: Board`Coords := [3,0];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [3, 3];
		dcl lionPiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), lionPiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testJumpMoveBlocked: () ==> ()
	testJumpMoveBlocked() == (
		dcl src: Board`Coords := [2,5];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), [4, 5] |-> new RatPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [6, 5];
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		assertTrue(not board.validMove(src, dest));
	);
	
	public testCapture: () ==> ()
	testCapture() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl lionPiece : Piece := board.pieces(src);
		dcl dogPiece : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), lionPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(dogPiece not in set rng board.pieces);
	);
	
	public testCaptureAfterJump: () ==> ()
	testCaptureAfterJump() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [6, 5];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new RatPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl lionPiece : Piece := board.pieces(src);
		dcl ratPiece : Piece := board.pieces(dest);
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), lionPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(ratPiece not in set rng board.pieces);
	);
	
	public testCaptureDefenderWin: () ==> ()
	testCaptureDefenderWin() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl ratPiece : Piece := board.pieces(src);
		dcl dogPiece : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), dogPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(ratPiece not in set rng board.pieces);
	);
	
	public testCaptureRatAndElephant: () ==> ()
	testCaptureRatAndElephant() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), dest |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl ratPiece : Piece := board.pieces(src);
		dcl elephantPiece : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), ratPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(elephantPiece not in set rng board.pieces);
	);
	
	public testCaptureSameRank: () ==> ()
	testCaptureSameRank() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new DogPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dogPieceAttacker : Piece := board.pieces(src);
		dcl dogPieceDefender : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), dogPieceAttacker);
		assertTrue(src not in set dom board.pieces);
		assertTrue(dogPieceDefender not in set rng board.pieces);
	);
	
	public testWinByArrivingToDen: () ==> ()
	testWinByArrivingToDen() == (
		dcl src: Board`Coords := [8, 2];
		dcl dest : Board`Coords := [8, 3];
		dcl pieces : Board`Pieces := {src |-> new DogPiece(<PLAYER1>), [6, 6] |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		
		board.startGame();
		assertEqual(board.state, <PLAY>);
		assertEqual(board.tiles(dest).type, DenTile`TYPE);
		assertEqual(board.tiles(dest).owner, <PLAYER2>);
		board.play(src, dest);
		assertEqual(board.state, <END>);
		assertEqual(board.winner, <PLAYER1>);
	);
	
	public testWinByCapturingAllPieces: () ==> ()
	testWinByCapturingAllPieces() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.state, <END>);
		assertEqual(board.winner, <PLAYER1>);
		assertTrue(not exists piece in set rng board.pieces & piece.owner = <PLAYER2>);
	);
	
	public testAll: () ==> ()
	testAll() == (
		IO`println("StepMove");
		testStepMove();
		
		
		IO`println("SwimMove");
		testSwimMove();
		
		
		IO`println("JumpMove");
		testJumpMoveVertical();
		testJumpMoveHorizontal();
		testJumpMoveBlocked();
		
		
		IO`println("Capture");
		testCapture();
		testCaptureAfterJump();
		testCaptureDefenderWin();
		testCaptureRatAndElephant();
		testCaptureSameRank();
		
		IO`println("Win conditions");
		testWinByArrivingToDen();
		testWinByCapturingAllPieces();
		
		IO`println("All tests passed");
	);
	
	public static main: () ==> ()
  main() == new BoardTest().testAll();                        
  
end BoardTest 
