class BoardTest is subclass of TestCase
operations
	public testPlayerOrder: () ==> ()
	testPlayerOrder() == (
		dcl board : Board := new Board();
		
		board.startGame();
		assertEqual(board.currentPlayer, <PLAYER1>);
		board.play([2,6], [3,6]);
		assertEqual(board.currentPlayer, <PLAYER2>);
		board.play([6, 6], [5,6]);
		assertEqual(board.currentPlayer, <PLAYER1>);
	);
	
	
	public testGameNotPlayableIfItStartsFinished: () ==> ()
	testGameNotPlayableIfItStartsFinished() == (
		dcl src : Board`Coords := [0,2];
		dcl dest : Board`Coords := [1, 2];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>)};
		dcl board : Board := new Board(pieces);
		
		board.startGame();
		assertEqual(board.state, <END>);
		assertTrue(not board.validMove(src, dest));
		assertEqual(board.winner, <PLAYER1>);
	);
	
	
	public testNotAllowedToMoveOtherPlayerPieces: () ==> ()
	testNotAllowedToMoveOtherPlayerPieces() == (
		dcl board : Board := new Board();
		dcl adversaryPieceSrc : Board`Coords := [6,6];
		dcl adversaryPieceDest : Board`Coords := [5,6];
		dcl adversaryPiece : Piece := board.pieces([6,6]);

		board.startGame();
		assertEqual(board.currentPlayer, <PLAYER1>);
		assertEqual(adversaryPiece.owner, <PLAYER2>);
		assertTrue(not board.validMove(adversaryPieceSrc, adversaryPieceDest));
	);

	public testNotAllowedToStayInSamePlace: () ==> ()
	testNotAllowedToStayInSamePlace() == (
		dcl board : Board := new Board();
		dcl srcDest : Board`Coords := [0, 0];
		
		board.startGame();
		assertTrue(not board.validMove(srcDest, srcDest));
	);
	
	
	public testNotAllowedToCaptureOwnPieces: () ==> ()
	testNotAllowedToCaptureOwnPieces() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl lionPiece : Piece := board.pieces(src);
		dcl dogPiece : Piece := board.pieces(dest);
		
		board.startGame();
		assertEqual(lionPiece.owner, dogPiece.owner);
		assertTrue(not board.validMove(src, dest));
	);
	
	public testSrcMustContainPiece: () ==> ()
	testSrcMustContainPiece() == (
		dcl src: Board`Coords := [0, 1];
		dcl dest: Board`Coords := [1, 1];
		dcl board : Board := new Board();
		
		board.startGame();
		assertTrue(src not in set dom board.pieces);
		assertTrue(not board.validMove(src, dest));
	);
	
	public testCoordsMustBeInTheBoard: () ==> ()
	testCoordsMustBeInTheBoard() == (
		dcl src: Board`Coords := [2, 6];
		dcl dest: Board`Coords := [2, 7];
		dcl board : Board := new Board();
		
		board.startGame();
		assertTrue(src in set dom board.tiles);
		assertTrue(dest not in set dom board.tiles);
		assertTrue(not board.validMove(src, dest));	
	);
	
	public testStepMove: () ==> ()
	testStepMove() == (
		dcl board : Board := new Board();
		dcl src : Board`Coords := [2,6];
		dcl dest : Board`Coords := [3,6];
		dcl mousePiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(mousePiece.type, RatPiece`TYPE);
		assertEqual(mousePiece.owner, <PLAYER1>);
		board.play(src, dest);
		assertEqual(board.pieces(dest), mousePiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testStepMoveToOwnDenBlocked: () ==> ()
	testStepMoveToOwnDenBlocked() == (
		dcl src : Board`Coords := [0,2];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [0,3];
		dcl ratPiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(dest).type, DenTile`TYPE);
		assertEqual(board.tiles(dest).owner, ratPiece.owner);
		assertTrue(not board.validMove(src, dest));
	);
	
	
	public testNewPiecesNotAllowedToStepMove: () ==> ()
	testNewPiecesNotAllowedToStepMove() == (
		dcl src : Board`Coords := [0,0];
		dcl pieces : Board`Pieces := {src |-> new Piece("NewPiece", <PLAYER1>, 20), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [0,1];
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		assertTrue(not board.validMove(src, dest));
	);
	
	public testSwimMoveInWater: () ==> ()
	testSwimMoveInWater() == (
		dcl src : Board`Coords := [3,5];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [4,5];
		dcl mousePiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(src).type, WaterTile`TYPE);
		assertEqual(board.tiles(dest).type, WaterTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), mousePiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testSwimMoveToWater: () ==> ()
	testSwimMoveToWater() == (
		dcl src : Board`Coords := [2,5];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [3,5];
		dcl mousePiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, WaterTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), mousePiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testSwimMoveFromWater: () ==> ()
	testSwimMoveFromWater() == (
		dcl src : Board`Coords := [3,5];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [2,5];
		dcl mousePiece : Piece := board.pieces(src);
		
		board.startGame();
		assertEqual(board.tiles(src).type, WaterTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), mousePiece);
		assertTrue(src not in set dom board.pieces);
	);
	
	public testCanOnlySwimOneTile: () ==> ()
	testCanOnlySwimOneTile() == (
		dcl src : Board`Coords := [3,5];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), [6, 6] |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [5,5];
		
		board.startGame();
		assertEqual(board.tiles(src).type, WaterTile`TYPE);
		assertEqual(board.tiles(dest).type, WaterTile`TYPE);
		assertTrue(not board.validMove(src, dest));
	);
	
	public testJumpMoveVertical: () ==> ()
	testJumpMoveVertical() == (
		dcl srcLion: Board`Coords := [2,5];
		dcl srcTiger: Board`Coords := [6,4];
		dcl pieces : Board`Pieces := {srcLion |-> new LionPiece(<PLAYER1>), srcTiger |-> new TigerPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl destLion : Board`Coords := [6, 5];
		dcl destTiger : Board`Coords := [2, 4];
		dcl lionPiece : Piece := board.pieces(srcLion);
		dcl tigerPiece : Piece := board.pieces(srcTiger);
		
		board.startGame();
		assertEqual(board.tiles(srcLion).type, PlainTile`TYPE);
		assertEqual(board.tiles(destLion).type, PlainTile`TYPE);
		board.play(srcLion, destLion);
		assertEqual(board.pieces(destLion), lionPiece);
		assertTrue(srcLion not in set dom board.pieces);
		assertEqual(board.tiles(srcTiger).type, PlainTile`TYPE);
		assertEqual(board.tiles(destTiger).type, PlainTile`TYPE);
		board.play(srcTiger, destTiger);
		assertEqual(board.pieces(destTiger), tigerPiece);
		assertTrue(srcTiger not in set dom board.pieces);
		
	);

	public testJumpMoveHorizontal: () ==> ()
	testJumpMoveHorizontal() == (
		dcl srcLion: Board`Coords := [3,0];
		dcl srcTiger: Board`Coords := [4,3];
		dcl pieces : Board`Pieces := {srcLion |-> new LionPiece(<PLAYER1>), srcTiger |-> new TigerPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl destLion : Board`Coords := [3, 3];
		dcl destTiger : Board`Coords := [4, 0];
		dcl lionPiece : Piece := board.pieces(srcLion);
		dcl tigerPiece : Piece := board.pieces(srcTiger);
		
		board.startGame();
		assertEqual(board.tiles(srcLion).type, PlainTile`TYPE);
		assertEqual(board.tiles(destLion).type, PlainTile`TYPE);
		board.play(srcLion, destLion);
		assertEqual(board.pieces(destLion), lionPiece);
		assertTrue(srcLion not in set dom board.pieces);
		assertEqual(board.tiles(srcTiger).type, PlainTile`TYPE);
		assertEqual(board.tiles(destTiger).type, PlainTile`TYPE);
		board.play(srcTiger, destTiger);
		assertEqual(board.pieces(destTiger), tigerPiece);
		assertTrue(srcTiger not in set dom board.pieces);
	);
	
	public testJumpMoveBlocked: () ==> ()
	testJumpMoveBlocked() == (
		dcl srcUp: Board`Coords := [2,5];
		dcl srcDown: Board`Coords := [6,4];
		dcl srcLeft: Board`Coords := [4, 6];
		dcl srcRight: Board`Coords := [5, 3];
		
		dcl pieces : Board`Pieces := {srcUp |-> new LionPiece(<PLAYER1>), srcDown |-> new TigerPiece(<PLAYER1>),
																	srcLeft |-> new LionPiece(<PLAYER1>), srcRight |-> new TigerPiece(<PLAYER1>),
																	[4, 5] |-> new RatPiece(<PLAYER2>), [5, 4] |-> new RatPiece(<PLAYER1>)};
		dcl board : Board := new Board(pieces);
		dcl destUp : Board`Coords := [6, 5];
		dcl destDown : Board`Coords := [2, 4];
		dcl destLeft : Board`Coords := [4,3];
		dcl destRight : Board`Coords := [5,6];
		
		board.startGame();
		assertEqual(board.tiles(srcUp).type, PlainTile`TYPE);
		assertEqual(board.tiles(destUp).type, PlainTile`TYPE);
		assertTrue(not board.validMove(srcUp, destUp));
		assertEqual(board.tiles(srcDown).type, PlainTile`TYPE);
		assertEqual(board.tiles(destDown).type, PlainTile`TYPE);
		assertTrue(not board.validMove(srcDown, destDown));
		assertEqual(board.tiles(srcLeft).type, PlainTile`TYPE);
		assertEqual(board.tiles(destLeft).type, PlainTile`TYPE);
		assertTrue(not board.validMove(srcLeft, destLeft));
		assertEqual(board.tiles(srcRight).type, PlainTile`TYPE);
		assertEqual(board.tiles(destRight).type, PlainTile`TYPE);
		assertTrue(not board.validMove(srcRight, destRight));
	);
	
	public testCantJumpToWater: () ==> ()
	testCantJumpToWater() == (
		dcl src: Board`Coords := [2,5];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), [6,6] |-> new TigerPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dest : Board`Coords := [5, 5];
			
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, WaterTile`TYPE);
		assertTrue(not board.validMove(src, dest));
	);
	
	public testCapture: () ==> ()
	testCapture() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl lionPiece : Piece := board.pieces(src);
		dcl dogPiece : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), lionPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(dogPiece not in set rng board.pieces);
	);
	
	public testCaptureAfterJump: () ==> ()
	testCaptureAfterJump() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [6, 5];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new RatPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl lionPiece : Piece := board.pieces(src);
		dcl ratPiece : Piece := board.pieces(dest);
		
		board.startGame();
		assertEqual(board.tiles(src).type, PlainTile`TYPE);
		assertEqual(board.tiles(dest).type, PlainTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), lionPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(ratPiece not in set rng board.pieces);
	);
	
	public testCaptureDefenderWin: () ==> ()
	testCaptureDefenderWin() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl ratPiece : Piece := board.pieces(src);
		dcl dogPiece : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), dogPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(ratPiece not in set rng board.pieces);
	);
	
	public testCaptureRatAndElephant: () ==> ()
	testCaptureRatAndElephant() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), dest |-> new ElephantPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl ratPiece : Piece := board.pieces(src);
		dcl elephantPiece : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), ratPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(elephantPiece not in set rng board.pieces);
	);
	
	public testCaptureSameRank: () ==> ()
	testCaptureSameRank() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new DogPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dogPieceAttacker : Piece := board.pieces(src);
		dcl dogPieceDefender : Piece := board.pieces(dest);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.pieces(dest), dogPieceAttacker);
		assertTrue(src not in set dom board.pieces);
		assertTrue(dogPieceDefender not in set rng board.pieces);
	);
	
	public testCaptureRatInWater: () ==> ()
	testCaptureRatInWater() == (
		dcl src: Board`Coords := [3,5];
		dcl dest : Board`Coords := [4, 5];
		dcl pieces : Board`Pieces := {src |-> new RatPiece(<PLAYER1>), dest |-> new RatPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl ratPieceAttacker : Piece := board.pieces(src);
		dcl ratPieceDefender : Piece := board.pieces(dest);
		
		board.startGame();
		assertEqual(board.tiles(src).type, WaterTile`TYPE);
		assertEqual(board.tiles(dest).type, WaterTile`TYPE);
		board.play(src, dest);
		assertEqual(board.pieces(dest), ratPieceAttacker);
		assertTrue(src not in set dom board.pieces);
		assertTrue(ratPieceDefender not in set rng board.pieces);
	);
	
	
	public testCaptureHigherRankInTrap : () ==> ()
	testCaptureHigherRankInTrap() == (
		dcl src: Board`Coords := [0,1];
		dcl dest : Board`Coords := [0, 2];
		dcl pieces : Board`Pieces := {src |-> new DogPiece(<PLAYER1>), dest |-> new LionPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl dogPiece : Piece := board.pieces(src);
		dcl lionPiece : Piece := board.pieces(dest);
		
		board.startGame();
		assertEqual(board.tiles(dest).type, TrapTile`TYPE);
		assertEqual(board.tiles(dest).owner, dogPiece.owner);
		assertTrue(dogPiece.rank < lionPiece.rank);
		board.play(src, dest);
		assertEqual(board.pieces(dest), dogPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(lionPiece not in set rng board.pieces);
	);
	
	public testCaptureInEnemyTrap : () ==> ()
	testCaptureInEnemyTrap() == (
		dcl src: Board`Coords := [8, 1];
		dcl dest : Board`Coords := [8, 2];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		dcl lionPiece : Piece := board.pieces(src);
		dcl dogPiece : Piece := board.pieces(dest);
		
		board.startGame();
		assertEqual(board.tiles(dest).type, TrapTile`TYPE);
		assertEqual(board.tiles(dest).owner, dogPiece.owner);
		assertTrue(dogPiece.rank < lionPiece.rank);
		board.play(src, dest);
		assertEqual(board.pieces(dest), dogPiece);
		assertTrue(src not in set dom board.pieces);
		assertTrue(lionPiece not in set rng board.pieces);
	);
	
	public testWinByArrivingToDen: () ==> ()
	testWinByArrivingToDen() == (
		dcl src: Board`Coords := [8, 2];
		dcl dest : Board`Coords := [8, 3];
		dcl pieces : Board`Pieces := {src |-> new DogPiece(<PLAYER1>), [6, 6] |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		
		board.startGame();
		assertEqual(board.state, <PLAY>);
		assertEqual(board.tiles(dest).type, DenTile`TYPE);
		assertEqual(board.tiles(dest).owner, <PLAYER2>);
		board.play(src, dest);
		assertEqual(board.state, <END>);
		assertEqual(board.winner, <PLAYER1>);
	);
	
	public testWinByCapturingAllPieces: () ==> ()
	testWinByCapturingAllPieces() == (
		dcl src: Board`Coords := [2,5];
		dcl dest : Board`Coords := [2, 6];
		dcl pieces : Board`Pieces := {src |-> new LionPiece(<PLAYER1>), dest |-> new DogPiece(<PLAYER2>)};
		dcl board : Board := new Board(pieces);
		
		board.startGame();
		board.play(src, dest);
		assertEqual(board.state, <END>);
		assertEqual(board.winner, <PLAYER1>);
		assertTrue(not exists piece in set rng board.pieces & piece.owner = <PLAYER2>);
	);
	
	public testAll: () ==> ()
	testAll() == (
		IO`println("Game progression logic");
		testPlayerOrder();
		testGameNotPlayableIfItStartsFinished();
		
		IO`println("Movement");
		testNotAllowedToMoveOtherPlayerPieces();
		testNotAllowedToStayInSamePlace();
		testNotAllowedToCaptureOwnPieces();
		testSrcMustContainPiece();
		testCoordsMustBeInTheBoard();
	
	
		IO`println("StepMove");
		testStepMove();
		testStepMoveToOwnDenBlocked();
		testNewPiecesNotAllowedToStepMove(); --coverage test
		
		
		IO`println("SwimMove");
		testSwimMoveInWater();
		testSwimMoveToWater();
		testSwimMoveFromWater();
		testCanOnlySwimOneTile();
		
		
		IO`println("JumpMove");
		testJumpMoveVertical();
		testJumpMoveHorizontal();
		testJumpMoveBlocked();
		testCantJumpToWater();
		
		
		IO`println("Capture");
		testCapture();
		testCaptureAfterJump();
		testCaptureDefenderWin();
		testCaptureRatAndElephant();
		testCaptureSameRank();
		testCaptureRatInWater();
		testCaptureHigherRankInTrap();
		testCaptureInEnemyTrap();
		
		
		IO`println("Win conditions");
		testWinByArrivingToDen();
		testWinByCapturingAllPieces();
		
		IO`println("All tests passed");
	);
	
	public static main: () ==> ()
  main() == new BoardTest().testAll();                        
  
end BoardTest 
