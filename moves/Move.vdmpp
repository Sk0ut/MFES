class Move
types
	public MoveType = seq1 of char;
instance variables
	public type : MoveType;
	public allowedPieces : set of Piece`PieceType
operations
	public Move: MoveType * set of Piece`PieceType ==> Move
	Move(argType, argAllowedPieces) == (
		type := argType;
		allowedPieces := argAllowedPieces;
		return self;
	)
	post type = argType and allowedPieces = argAllowedPieces;

	public pure validMove: Board * Board`Coords * Board`Coords ==> bool
	validMove(board, src, dest) == is subclass responsibility
	pre src in set dom board.pieces and dest in set dom board.tiles and src <> dest;
	
functions
	public sameRow: Board`Coords * Board`Coords +> bool
	sameRow(src, dest) == src(Board`ROW) = dest(Board`ROW);
	
	public sameCol: Board`Coords * Board`Coords +> bool
	sameCol(src, dest) == src(Board`COL) = dest(Board`COL);
	
	public adjacentTiles: Board`Coords * Board`Coords +> bool
	adjacentTiles(src, dest) == (sameRow(src, dest) and abs(dest(Board`COL)-src(Board`COL)) = 1) or (sameCol(src, dest) and abs(dest(Board`ROW)-src(Board`ROW)) = 1);
	
traces
-- TODO Define Combinatorial Test Traces here
end Move